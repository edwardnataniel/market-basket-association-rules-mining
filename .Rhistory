# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1), ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
apply(matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1],2,mean)
apply(matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1], 1 ,mean)
?apply
apply(matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1], 2 ,mean)
matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1]
h <- matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1]
apply(h, 2 ,mean)
h <- matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1]
library(lme4)
library(lmmlasso)
library(mvtnorm)
rm(list = ls())
# cluster and sample sizes
J <- 30     # number of clusters
N <- 30     # sample size per cluster
M <- J * N     # total number of observations
# parameters
gamma_0_0 <- 1     # mean intercept across all clusters
gamma_0_1 <- -0.15     # slope of level-2 independent variable
beta_1 <- 2     # slope of level-1 independent variable x1
tau_sq <- 0.2     # variance of random effects at cluster level
sigma_sq <- 1      # variance of random effects at individual level
# mean and variances of independent variables
z.mean <- 0
z.variance <- 4
x1.mean <- 10
x1.variance <- 10
# level-2 independent variables
set.seed(2345)
z = rnorm(J, mean = z.mean, sd = sqrt(z.variance))
# level-2 random effects
set.seed(2345)
errors.intercept <- rnorm(N, mean = 0, sd = sqrt(tau_sq))
# random intercept
beta_0_j <- gamma_0_0 + gamma_0_1 * z + errors.intercept
beta_0_j <- rep(beta_0_j, each = N)
beta_0_j
# level-1 independent variables
x1 <- rnorm(n=M, mean = x1.mean, sd = sqrt(x1.variance))
# x1 <- rnorm(n=n, mean=x1.mean, sd=sqrt(x1.variance))
# x1 <- rep(x1, J)
# level-1 random effects
errors.individual <- rnorm(M, mean = 0, sd = sqrt(sigma_sq))
errors.individual
# multilevel model
set.seed(2345)
y <- beta_0_j + beta_1 * x1 + errors.individual
head(y, 10)
# multilevel data
multilevel.data <- data.frame(cluster = sort(rep(c(1:J), N)), obs_number = rep(c(1:N), J)
, z = rep(z, each = N), y = y, x1 = x1)
head(multilevel.data, 10)
# REML estimation
lmer.fit <-  lmer(y ~ x1 + (1 | cluster), data = multilevel.data)
cat("AIC =", AIC(lmer.fit))
summary(lmer.fit)
#my.lmer <-  lmer(y ~ x + a + x * a + (1 + x | unit), data = simple.df)
#summary(my.lmer)
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1), ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
h <- matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-2]
h
h <- matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)[,-1]
h
apply(h, 2 ,mean)
h <- matrix(c(rep(1, each = M), c(rep(2, each = M)), ncol = 2)[,-1]
h <- matrix(c(rep(1, each = M), c(rep(2, each = M)), ncol = 2)[, -1]
h <- matrix(c(rep(1, each = M), c(rep(2, each = M))), ncol = 2)[, -1]
h <- matrix(c(rep(1, each = M), c(rep(2, each = M))), ncol = 2)[, -1]
h
apply(h, 2 ,mean)
lapply(h, 2 ,mean)
apply(h, 2 ,mean)
apply(h, 2 ,mean)
h <- matrix(c(rep(1, each = M), array(rep(2, each = M))), ncol = 2)[, -1]
h
apply(h, 2 ,mean)
?lmmlasso
h
h
h <- matrix(c(rep(1, each = M), c(rep(2, each = M))), ncol = 2)
h
dim(h)
h <- matrix(c(rep(1, each = M), multilevel.data$x1[[1], ncol = 2)
apply(h, 2 ,mean)
h <- matrix(c(rep(1, each = M), multilevel.data$x1[[1]], ncol = 2)
h <- matrix(c(rep(1, each = M), multilevel.data$x1[[1]], ncol = 2))
apply(h, 2 ,mean)
apply(h, 2 , sum)
multilevel.data$x1[[1]]
multilevel.data$x1[[2]]
multilevel.data$x1[[]]
multilevel.data$x1
multilevel.data$x1
unlist(multilevel.data$x1)
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), unlist(x1)), ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data))
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data))
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data))
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
)
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1), ncol = 2), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data))
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2)), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data))
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2)), y = matrix(y), z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M), x1, ncol = 2)), y = y, z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
h <- matrix(c(rep(1, each = M), multilevel.data$x1[[1]], ncol = 2))
apply(h, 2 , sum)
h <- matrix(c(rep(1, each = M), multilevel.data$x1, ncol = 2))
h
matrix(c(rep(1, each = M), x1, ncol = 2)
matrix(c(rep(1, each = M), x1, ncol = 2))
matrix(c(rep(1, each = M), x1, ncol = 2))
matrix(c(rep(1, each = M), multilevel.data$x1, ncol = 2))
matrix(c(rep(1, each = M)), multilevel.data$x1, ncol = 2)
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M)), x1, ncol = 2), y = y, z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
J <- 30     # number of clusters
N <- 30     # sample size per cluster
M <- J * N     # total number of observations
# MLL estimation
lmmlasso(x = matrix(c(rep(1, each = M)), x1, ncol = 2), y = y, z = matrix(z), grp = cluster,
lambda = 0.1, data = multilevel.data)
h <- matrix(c(rep(1, each = M)), multilevel.data$x1, ncol = 2)
?matrix
?matrix
h <- matrix(c(rep(1, each = M), multilevel.data$x1), ncol = 2)
h <- matrix(data = c(rep(1, each = M), multilevel.data$x1), ncol = 2)
h <- matrix(data = c(rep(1, each = M), multilevel.data$x1), ncol = 2)
h
h <- matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2)
apply(h, 2 , sum)
# MLL estimation
lmmlasso(matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), y = y, z = matrix(z), lambda = 0.5)
# MLL estimation
lmmlasso(x = matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), y = y, z = matrix(z), lambda = 0.5)
?lmmlasso
# MLL estimation
lmmlasso(x = matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1))), y = y, z = matrix(z), lambda = 0.5)
dim(matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1))))
lmmlasso(x = matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2), y = y,
z = matrix(z), lambda = 0.5)
lmmlasso(x = matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2), y = y,
z = matrix(z), grp = cluster, lambda = 0.5, data = multilevel.data)
h <- matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2)
apply(h, 2 , sum)
apply(x[,-1], 2 , sum)
h <- matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2)[,-1]
apply(x[,-1], 2 , sum)
apply(h[,-1], 2 , sum)
h <- matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2)[,-1]
apply(h[,-1], 2 , sum)
apply(h, 2 , sum)
h <- matrix(data = c(rep(1, each = M), matrix(multilevel.data$x1, ncol=1)), ncol = 2)[,-1]
apply(h, 2 , sum)
h
class(h)
x <- matrix(c(1,0,0,2,0,0,3,0,0), nrow = 3, byrow = TRUE)
x
x <- matrix(c(1,0,0,0,2,0,0,0,3), nrow = 3, byrow = TRUE)
x
y <- matrix(c(1,2,3,0,4,5,0,0,6), nrow=3, byrow = TRUE)
y
x %*% y
subsets(50, 1, v = 1:n)
SUBSETS?
?subsets
?subsets
??subsets
# x's
mu <- rep(0, times = 1000)
mu
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
subsets(n, r, v = 1:n)
??subsets
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
rm(list = ls())
library(glmnet)
library(caTools)
library(lars)
library(MASS)
source("inflasso.R")
# non-orthogonal design
corr.matrix.2 <- matrix(rep(0,1000*1000), ncol = 1000)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.5
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
corr.matrix.2 <- matrix(rep(0,40*40), ncol = 40)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.5
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
# x's
mu <- rep(0, times = 40)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
corr.matrix.2 <- matrix(rep(0,40*40), ncol = 40)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.1
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
mu <- rep(0, times = 40)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
# non-orthogonal design
corr.matrix.2 <- matrix(rep(0,100*100), ncol = 100)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.1
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
# x's
mu <- rep(0, times = 100)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
corr.matrix <- matrix(rep(0, 1000*1000), ncol = 1000)
diag(corr.matrix) <- 1
corr.matrix
# x's
mu <- rep(0, times = 100)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
# x's
mu <- rep(0, times = 100)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix)
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix)
x
# non-orthogonal design
corr.matrix.2 <- matrix(rep(0,100*100), ncol = 100)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.5
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2)
x
corr(x)
cor(x)
sum(diag(cor(x)))
ave(cor(x))
# non-orthogonal design
corr.matrix.2 <- matrix(rep(0,100*100), ncol = 100)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.5
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
cor(cor.matrix.2)
cor(corr.matrix.2)
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2)
x
cor(x)[2]
cor(x)[2, ]
cor(x)[1:2, ]
cor(x)[1:2, 1:2]
cor(x)[1:10, 1:10]
?mvrnorm
?mvrnorm
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
x
cor(x)[1:10, 1:10]
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix.2, empirical = TRUE)
corr.matrix <- matrix(rep(0, 1000*1000), ncol = 1000)
diag(corr.matrix) <- 1
corr.matrix
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix, empirical = TRUE)
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix, empirical = TRUE)
x
cor(x)[1:10, 1:10]
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix, empirical = TRUE)
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix)
x
cor(x)[1:10, 1:10]
corr.matrix <- matrix(rep(0, 1000*1000), ncol = 1000)
diag(corr.matrix) <- 1
corr.matrix
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix)
x
cor(x)[1:10, 1:10]
# non-orthogonal design
corr.matrix.2 <- matrix(rep(0,1000*1000), ncol = 100)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.5
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix2)
x
cor(x)[1:10, 1:10]
# orthogonal design
corr.matrix <- matrix(rep(0, 1000*1000), ncol = 1000)
diag(corr.matrix) <- 1
corr.matrix
# non-orthogonal design
corr.matrix.2 <- matrix(rep(0,1000*1000), ncol = 100)
corr.matrix.2[lower.tri(corr.matrix.2)] <- 0.5
corr.matrix.2 <- corr.matrix.2 + t(corr.matrix.2)
diag(corr.matrix.2) <- 1
corr.matrix.2
x
# adding outliers
x
# adding outliers
x[1,]
# adding outliers
x[,1]
# adding outliers
x
# adding outliers
x[1,]
# adding outliers
x[1,1]
# adding outliers
x[1,2]
# adding outliers
x[1,3]
# adding outliers
x[1,1000]
y <- sum(x[1:5, ])
y
x[1:5,]
?lapply
lapply(x[1:5,] sum)
lapply(x[1:5,], sum)
y <- 1 * x[1,]
y
x
y <- 1 * x[, 1]
y <- 1 * x[, 1]
head(y, 10)
x[1:5,1:5]
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5]
y
# x's
mu <- rep(0, times = 1000)
mu
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix2)
x
x
# adding outliers
a <- 5
x[1,1000] <- 5
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5]
y
y <- 1 * x[, 1]
y
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5]
y
x[1:10, 1:10]
x[1:10, 1:10]
y
?rnorm
# response variable
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5] + rnorm()
# response variable
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5] + rnorm(50)
y
# response variable
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5]
y
+ rnorm(50)
# response variable
y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5] + rnorm(50)
y
# adding outliers
a <- 5
x[1, 1000] <- 5
y[1]
y
# response variable
mean_y <- 1 * x[, 1] + 2 * x[, 2] + 3 * x[, 3] + 4 * x[, 4] + 5 * x[, 5]
y <- mean_y + rnorm(50)
y
mean_y
# adding outliers
a <- 10
b <- 10
x[1, 1000] <- 5
y[1] <- mean_y + 5
y[1] <- mean_y + rep(5, n = 50)
rep
?rep
y[1] <- mean_y + rep(5, 50)
y[1] <- mean_y + rep(5, times = 50)
# adding outliers
a <- 10
b <- 10
x[1, 1000] <- a
y[1] <- mean_y[1] + b
mean_y
y
x <- mvrnorm(n = 50, mu = mu, Sigma = corr.matrix2)
# selecting initial clean subset
cor(x)
# selecting initial clean subset
solve(cor(x))
rm(list = ls())
install.packages("D:/R/vcd_1.4-7.tar.gz", lib = "D:\\R")
("arulesViz")
install.packages("arulesViz")
plot(rules, control = list(jitter = 2))
# imbalanced ratio = (supA - supB) / (supA + supB - supAUB)
supA = support(lhs(rules), basket, type = c("absolute"), control = NULL)
supB = support(rhs(rules), basket, type = c("absolute"), control = NULL)
supAUB = support(items(rules), basket, type = c("absolute"), control = NULL)
IR = abs(supA - supB) / (supA + supB - supAUB)
# kulczinski measure = 1/2 * (P(B|A) + P(A|B)) = 1/2 * ((sup AUB / sup A) + (sup AUB / sup B))
kulc = 0.5 * ((supAUB / supA) + (supAUB / supB))
kulc
# IR + kulc
IR_plus_kulc = IR + kulc
# adding the IR, kulc, and IR + kulc as a column to rules
quality(rules) <- cbind(quality(rules), IR)
quality(rules) <- cbind(quality(rules), kulc)
rules_high_lift <- head(sort(rules, by = "IR_plus_kulc"), 100)
inspect(rules_high_lift)
library(arules)
library(arulesViz)
basket <- read.transactions("basket.dat", format = "basket", sep = " ", rm.duplicates = TRUE)
basket
# apriori
rules <- apriori(basket, parameter = list(supp = 0.1, conf = 0.8))
inspect(rules)
plot(rules, control = list(jitter = 2))
# sorting rules
rules_high_lift <- head(sort(rules, by = "lift"), 20)
inspect(rules_high_lift)
setwd("D:\\GitHub\\cs176-data-mining\\Association Rules Mining Using the Retail Market Basket Data Set")
library(arules)
library(arulesViz)
basket <- read.transactions("basket.dat", format = "basket", sep = " ", rm.duplicates = TRUE)
basket
# apriori
rules <- apriori(basket, parameter = list(supp = 0.1, conf = 0.8))
inspect(rules)
# sorting rules
rules_high_lift <- head(sort(rules, by = "lift"), 20)
inspect(rules_high_lift)
# kulczinski measure = 1/2 * (P(B|A) + P(A|B)) = 1/2 * ((sup AUB / sup A) + (sup AUB / sup B))
kulc = 0.5 * ((supAUB / supA) + (supAUB / supB))
kulc
# imbalanced ratio = (supA - supB) / (supA + supB - supAUB)
supA = support(lhs(rules), basket, type = c("absolute"), control = NULL)
supB = support(rhs(rules), basket, type = c("absolute"), control = NULL)
supAUB = support(items(rules), basket, type = c("absolute"), control = NULL)
IR = abs(supA - supB) / (supA + supB - supAUB)
# kulczinski measure = 1/2 * (P(B|A) + P(A|B)) = 1/2 * ((sup AUB / sup A) + (sup AUB / sup B))
kulc = 0.5 * ((supAUB / supA) + (supAUB / supB))
kulc
# adding the IR, kulc
quality(rules) <- cbind(quality(rules), IR)
quality(rules) <- cbind(quality(rules), kulc)
rules_high_lift <- head(sort(rules, by = "IR"), 100)
inspect(rules_high_lift)
rules_high_lift <- head(sort(rules, by = "kulc"), 100)
inspect(rules_high_lift)
?sort
rules_high_lift <- head(sort(rules, by = "kulc", decreasing = FALSE), 100)
rules_high_lift <- head(sort(rules, by = "kulc", decreasing = FALSE), 100)
inspect(rules_high_lift)
